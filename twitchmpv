#!/usr/bin/env bash

args() {

    if [[ ! "$1" =~ ^\-.+ ]]; then
        CHANNEL=$1
        shift
    fi

    local options="hc:q:n:adsvli"
    local longoptions="help,config:,quality:,name:,audio-only,disown,silent,verbose,low-latency,ignore-config"
    local parsed_args
    parsed_args=$(getopt -o $options --long $longoptions -n "$(basename "$0")" -- "$@")


    eval set -- "$parsed_args"
    while true; do
        case $1 in
            -h | --help)
                usage
                exit 0
                ;;
            -c | --config)
                shift
                CONFIG_FILE=$1
                ;;
            -q | --quality)
                shift
                QUALITY=$1
                ;;
            -n | --name)
                shift
                CHANNEL=$1
                ;;
            -a | --audio-only)
                NO_VIDEO=1
                ;;
            -d | --disown)
                DISOWN=1
                ;;
            -s | --silent)
                SILENT=1
                ;;
            -v | --verbose)
                DEBUG=1
                ;;
            -l | --low-latency)
                LOW_LATENCY=1
                ;;
            -i | --ignore-config)
                IGNORE_CONFIG=1
                ;;
            --)
                shift
                # add all remaining arguments to array of arguments
                for arg; do
                    OPT_ARRAY+=("$arg")
                done
                break
                ;;
            *)
                usage
                exit 1
                ;;
        esac
        shift
    done
}

usage() {
    cat <<EOF 
    Usage: twitchmpv -n|--name <channel name or url> [options] -- [streamlink arguments]

    Watch Twitch streams with mpv using streamlink.

    Options:
    -h, --help              Show this help message and exit
    -c, --config            Set the path to the config file
    -q, --quality           Set the quality of the stream
    -n, --name              Set the name of the twitch channel, can also be a twitch url. Required.
    -a, --audio-only        Disable video playback
    -d, --disown            Disown the process (if you run with -a and -d, you can only kill the process manually)
    -s, --silent            Run streamlink in silent mode
    -v, --verbose           Print debug information
    -l, --low-latency       Enable low latency mode
    -i, --ignore-config     Ignore the config file except for the oauth and client id
    --                      Pass additional arguments to streamlink
EOF
}

error() {
    echo "Error: $*" >&2
    exit 1
}

info() {
    if [ "$DEBUG" == 1 ]; then
        echo "Info: $*" >&2
    fi
}

warn() {
    echo "Warning: $*" >&2
}

check_dependencies() {
    if ! [ -x "$(command -v streamlink)" ]; then
        error "streamlink is not installed"
    fi
    if ! [ -x "$(command -v mpv)" ]; then
        error "mpv is not installed"
    fi
    info "Dependencies found"
}

check_config_file() {
    if [ -z "$CONFIG_FILE" ]; then
        CONFIG_FILE="$HOME/.config/twitchmpv/config"
    fi
}

load_config() {
    if [ ! -f "$CONFIG_FILE" ]; then
        warn "Config file not found: $CONFIG_FILE"
    fi
    if [ -r "$CONFIG_FILE" ]; then
        info "Loading config file: $CONFIG_FILE"
        while read -r line; do
            if echo "$line" | grep -F = &>/dev/null; then
                if echo "$line" | grep -E '^\s*#' &>/dev/null; then
                    continue
                fi
                if [ "$IGNORE_CONFIG" == 1 ] && ! echo "$line" | grep -E '^(twitchOauth|twitchClientId)' &>/dev/null; then
                    continue
                fi
                line1=$(echo "$line" | tr -d '[:space:]')
                varname=$(echo "$line1" | cut -d '=' -f 1)
                config[$varname]=$(echo "$line1" | cut -d '=' -f 2-)
            fi
        done < "$CONFIG_FILE"
    fi
    
    if [ -z "$DISOWN" ]; then
        DISOWN="${config[disown]}"
        info "Disown set to $DISOWN"
    fi
    if [ -z "$NO_VIDEO" ]; then
        NO_VIDEO="${config[noVideo]}"
        info "No video set to $NO_VIDEO"
    fi
    if [ -z "$SILENT" ]; then
        SILENT="${config[silent]}"
        info "Silent set to $SILENT"
    fi
    if [ -z "$QUALITY" ]; then
        QUALITY="${config[defaultQuality]}"
        info "Quality set to $QUALITY"
    fi
    if [ -z "$LOW_LATENCY" ]; then
        LOW_LATENCY="${config[lowLatency]}"
        info "Low latency set to $LOW_LATENCY"
    fi
}

check_channel() {
    if [ -z "$CHANNEL" ]; then
        usage
        error "Channel name is required"
    fi
    if [[ $CHANNEL == *"twitch.tv"* ]]; then
        STREAM_URL="$CHANNEL"
    else
        STREAM_URL="https://www.twitch.tv/$CHANNEL"
    fi
    info "Channel set to $CHANNEL"
}

check_streamlink_opts() {
    OPT_ARRAY+=(-p mpv
               --twitch-disable-ads
               --twitch-api-header "Authorization=OAuth ${config[twitchOauth]}"
               --twitch-api-header "Client-Id=${config[twitchClientId]}")
    if [ "$NO_VIDEO" == 1 ]; then
        OPT_ARRAY+=(-a \"--no-video\")
    fi
    if [ "$SILENT" == 1 ]; then
        OPT_ARRAY+=(-Q)
    fi
    if [ "$LOW_LATENCY" == 1 ]; then
        OPT_ARRAY+=(--twitch-low-latency)
    fi
    info "Streamlink options: ${OPT_ARRAY[*]}"
}

play_stream() {
    info "Starting streamlink..."
    if [ "$DISOWN" == 1 ]; then
        streamlink "${OPT_ARRAY[@]}" "$STREAM_URL" "$QUALITY" & disown
    else
        streamlink "${OPT_ARRAY[@]}" "$STREAM_URL" "$QUALITY"
    fi
}

main() {
    check_dependencies
    check_channel
    check_config_file
    load_config
    check_streamlink_opts
    play_stream
}

typeset -A config
config=(
    [twitchOauth]="" # Twitch OAuth token
    [twitchClientId]="" # Twitch Client ID
    [defaultQuality]="best" # Default quality
    [disown]=0
    [noVideo]=0
    [silent]=0
    [lowLatency]=0
)

args "$@"
main
